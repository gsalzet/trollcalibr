% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processSim.R
\name{processSim}
\alias{processSim}
\title{A function to process simulation according to
a trolldae and experimental setup.}
\usage{
processSim(
  dae,
  inputs,
  checkConverge = TRUE,
  nyearsSampling,
  cores,
  filesave,
  nyearsStep = NULL,
  nyearsMax = NULL,
  simOpts = NULL
)
}
\arguments{
\item{dae}{trolldae. an initialized trolldae object.}

\item{inputs}{list. Other inputs commons between experiments.}

\item{checkConverge}{bool. Convergence will be check.
To check convengence, a Gelman and Rubinâ€™s
convergence diagnostic will be used.}

\item{nyearsSampling}{int. Number of year to check
convergence at the tail of simulation.}

\item{cores}{int. Number of cores to use.}

\item{filesave}{chr. Path to save dae in processing.}

\item{nyearsStep}{int. Number of year to add
if convergence is not reached.}

\item{nyearsMax}{int. Maximum number of year
to reach convergence.}
}
\value{
a trolldae object
}
\description{
A function to process simulation according to
a trolldae and experimental setup.
}
\examples{

 set.seed(123)
 require(tibble)
 require(dplyr)

paramsBounds <- tibble(parameter = c("CR_a","CR_b","fraction"),
  quantileFn = c(
   \(x) {qunif(x,1.5,3)}, # CR_a
   \(x) {qunif(x,0.4,0.8)}, # CR_b
   \(x) {qunif(x,0.1,0.9)}# fraction
   ),
   type = c("global","global", "experiment"))
   
DAE <- setupDesign(name = "test",paramsBounds = paramsBounds,ntotalsim = 200,  
nreplica = 4, sequential = TRUE,ninitsim = 25)
   
DAEwithParams <- generate_params(DAE, nyearsInit = 2)

fnExpSum <- function(x,...){
   summary <- as.matrix(data.frame("DBH" = mean(x@forest$dbh),
   "LAI" = mean(x@forest$LAI)))
   return(summary)
   }
   
fnExpFrac <- function(x,parameters,...){
    library(dplyr)
   x@forest <-  x@forest \%>\% sample_frac(parameters$fraction) 
   return(x)
   }  
   
Exp1 <- createExp(id = 1, 
 type = "Inter", deltaT = 1,
 fnExp = fnExpFrac,
 parameters = data.frame("fraction" = 0.5),
 inputs = list())
  
   
Exp2 <- createExp(id = 2, 
 type = "Summary", 
 fnExp = fnExpSum,
 parameters = data.frame(),
 inputs = list())
 
 setupExp12 <- setupExperiments(dae = DAEwithParams,
 listexp = list(Exp1,Exp2),
 inputs = list("exempleInputs" = list())
 )
 
 DAEwithExp <- addExp(dae = DAEwithParams, setupExp = setupExp12)
 

}
