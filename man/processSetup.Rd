% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processSetup.R
\name{processSetup}
\alias{processSetup}
\alias{processSetup,trollsim-method}
\alias{processSetup,trollstack-method}
\title{Function to process an a trollexpsetup on a trollsim}
\usage{
processSetup(
  sim,
  setup,
  inputs,
  saveInter = FALSE,
  parameters = NULL,
  cores = NULL,
  ...
)

\S4method{processSetup}{trollsim}(
  sim,
  setup,
  inputs,
  saveInter = FALSE,
  parameters = NULL,
  cores = NULL,
  ...
)

\S4method{processSetup}{trollstack}(
  sim,
  setup,
  inputs,
  saveInter = FALSE,
  parameters = NULL,
  cores = NULL,
  ...
)
}
\arguments{
\item{sim}{trollsim.}

\item{inputs}{list.}

\item{saveInter}{save intermediate results}

\item{parameters}{d.f.}

\item{cores}{number of cores to use}

\item{setupExp}{trollexpsetup}
}
\value{
an executed trollexpsetup.
}
\description{
Function to process an a trollexpsetup on a trollsim
}
\examples{

 set.seed(123)
 require(tibble)
 require(dplyr)

paramsBounds <- tibble(parameter = c("CR_a","CR_b","fraction"),
  quantileFn = c(
   function(x) {qunif(x,1.5,3)}, # CR_a
   function(x) {qunif(x,0.4,0.8)}, # CR_b
   function(x) {qunif(x,0.1,0.9)}# fraction
   ),
   type = c("global","global", "experiment"))
   
DAE <- setupDesign(name = "test",paramsBounds = paramsBounds,ntotalsim = 100,  nreplica = 1,  
sequential = TRUE,ninitsim = 5)
   
DAEwithParams <- generate_params(DAE, nyearsInit = 1)

fnExpSum <- function(x,...){
   summary <- as.matrix(data.frame("DBH" = mean(x@forest$dbh),
   "LAI" = mean(x@forest$LAI)))
   return(summary)
   }
   
fnExpFrac <- function(x,parameters,...){
  library(dplyr)
   x@forest <-  x@forest \%>\% sample_frac(parameters$fraction) 
   return(x)
   }  
   
Exp1 <- createExperiment(id = 1, 
 type = "Inter", deltaT = 1,
 fnExp = fnExpFrac,
 parameters = data.frame("fraction" = 0.5),
 inputs = list())
  
   
Exp2 <- createExperiment(id = 2, 
 type = "Summary", 
 fnExp = fnExpSum,
 parameters = data.frame(),
 inputs = list())
 
 setupExp12 <- setupExperiments(dae = DAEwithParams,
 listexp = list(Exp1,Exp2),
 inputs = list("exempleInputs" = list())
 )
 
 processSetup(TROLLv3_sim,
 setup = setupExp12,
 parameters = data.frame("fraction" = 0.5),
 inputs = list())

}
